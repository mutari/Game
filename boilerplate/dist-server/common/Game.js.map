{"version":3,"sources":["../../src/common/Game.js"],"names":["Player","gameEngine","options","props","other","health","Object","assign","type","BaseTypes","TYPES","INT16","DynamicObject","Game","physicsEngine","SimplePhysicsEngine","on","gameLogic","bind","serverSideInit","serverSidePlayerJoined","serverSidePlayerDisconnected","clientSideInit","clientSideDraw","serializer","registerClass","inputData","playerId","player","world","queryObject","input","position","y","x","ev","addObjectToWorld","TwoVector","queryObjects","instanceType","i","length","removeObjectFromWorld","id","controls","KeyboardControls","renderer","clientEngine","bindKey","repeat","players","gamePanel","document","querySelector","innerHTML","div","createElement","classList","add","style","width","height","top","left","border","appendChild","GameEngine"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;IACMA,M;;;;;AAEF,kBAAYC,UAAZ,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwC;AAAA;;AAAA,6BAC9BF,UAD8B,EAClBC,OADkB,EACTC,KADS;AAEvC;;;;2BAQMC,K,EAAO;AACV,yEAAaA,KAAb;;AACA,WAAKC,MAAL,GAAcD,KAAK,CAACC,MAApB;AACH;;;wBATsB;AACnB,aAAOC,MAAM,CAACC,MAAP,CAAc;AACjBF,QAAAA,MAAM,EAAE;AAAEG,UAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBC;AAAxB;AADS,OAAd,mDAAP;AAGH;;;;EAVgBC,sB,GAmBrB;AACA;AACA;AACA;AACA;;;IACqBC,I;;;;;AAEjB,gBAAYX,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,+BAAMA,OAAN;AACA,UAAKY,aAAL,GAAqB,IAAIC,4BAAJ,CAAwB;AAAEd,MAAAA,UAAU;AAAZ,KAAxB,CAArB,CAFiB,CAIjB;;AACA,UAAKe,EAAL,CAAQ,UAAR,EAAoB,MAAKC,SAAL,CAAeC,IAAf,+BAApB,EALiB,CAOjB;;;AACA,UAAKF,EAAL,CAAQ,cAAR,EAAwB,MAAKG,cAAL,CAAoBD,IAApB,+BAAxB;;AACA,UAAKF,EAAL,CAAQ,sBAAR,EAAgC,MAAKI,sBAAL,CAA4BF,IAA5B,+BAAhC;;AACA,UAAKF,EAAL,CAAQ,4BAAR,EAAsC,MAAKK,4BAAL,CAAkCH,IAAlC,+BAAtC,EAViB,CAYjB;;;AACA,UAAKF,EAAL,CAAQ,uBAAR,EAAiC,MAAKM,cAAL,CAAoBJ,IAApB,+BAAjC;;AACA,UAAKF,EAAL,CAAQ,cAAR,EAAwB,MAAKO,cAAL,CAAoBL,IAApB,+BAAxB;;AAdiB;AAepB;;;;oCAEeM,U,EAAY;AACxBA,MAAAA,UAAU,CAACC,aAAX,CAAyBzB,MAAzB;AACH;;;gCAEW,CACX;;;iCAEY0B,S,EAAWC,Q,EAAU;AAC9B,6EAAmBD,SAAnB,EAA8BC,QAA9B,EAD8B,CAG9B;;;AACA,UAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,WAAX,CAAuB;AAAEH,QAAAA,QAAQ,EAARA;AAAF,OAAvB,CAAb;;AACA,UAAIC,MAAJ,EAAY;AACR,YAAIF,SAAS,CAACK,KAAV,KAAoB,IAAxB,EAA8B;AAC1BH,UAAAA,MAAM,CAACI,QAAP,CAAgBC,CAAhB,IAAqB,CAArB;AACH,SAFD,MAEO,IAAIP,SAAS,CAACK,KAAV,KAAoB,MAAxB,EAAgC;AACnCH,UAAAA,MAAM,CAACI,QAAP,CAAgBC,CAAhB,IAAqB,CAArB;AACH,SAFM,MAEA,IAAIP,SAAS,CAACK,KAAV,KAAoB,MAAxB,EAAgC;AACnCH,UAAAA,MAAM,CAACI,QAAP,CAAgBE,CAAhB,IAAqB,CAArB;AACH,SAFM,MAEA,IAAIR,SAAS,CAACK,KAAV,KAAoB,OAAxB,EAAiC;AACpCH,UAAAA,MAAM,CAACI,QAAP,CAAgBE,CAAhB,IAAqB,CAArB;AACH;AACJ;AACJ,K,CAGD;AACA;AACA;AACA;AACA;;;;qCACiB,CAKhB,C,CAHG;AACA;AAIJ;;;;2CACuBC,E,EAAI;AACvB,UAAIP,MAAM,GAAG,KAAKQ,gBAAL,CAAsB,IAAIpC,MAAJ,CAAW,IAAX,EAAiB,IAAjB,EAAuB;AAAEgC,QAAAA,QAAQ,EAAE,IAAIK,kBAAJ,CAAc,GAAd,EAAmB,GAAnB;AAAZ,OAAvB,CAAtB,CAAb;AACAT,MAAAA,MAAM,CAACD,QAAP,GAAkBQ,EAAE,CAACR,QAArB;AACH;;;iDAE4BQ,E,EAAI;AAC7B,UAAIP,MAAM,GAAG,KAAKC,KAAL,CAAWS,YAAX,CAAwB;AAAEC,QAAAA,YAAY,EAAEvC;AAAhB,OAAxB,CAAb;;AACA,WAAI,IAAIwC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGZ,MAAM,CAACa,MAA1B,EAAkCD,CAAC,EAAnC;AACI,YAAGZ,MAAM,CAACY,CAAD,CAAN,CAAUb,QAAV,IAAsBQ,EAAE,CAACR,QAA5B,EACI,KAAKe,qBAAL,CAA2Bd,MAAM,CAACY,CAAD,CAAN,CAAUG,EAArC;AAFR;AAGH,K,CAGD;AACA;AACA;AACA;AACA;;;;qCACiB;AACb,WAAKC,QAAL,GAAgB,IAAIC,yBAAJ,CAAqB,KAAKC,QAAL,CAAcC,YAAnC,CAAhB;AACA,WAAKH,QAAL,CAAcI,OAAd,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAlC;AACA,WAAKL,QAAL,CAAcI,OAAd,CAAsB,MAAtB,EAA8B,MAA9B,EAAsC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAtC;AACA,WAAKL,QAAL,CAAcI,OAAd,CAAsB,MAAtB,EAA8B,MAA9B,EAAsC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAtC;AACA,WAAKL,QAAL,CAAcI,OAAd,CAAsB,OAAtB,EAA+B,OAA/B,EAAwC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAxC;AACH;;;qCAEgB;AAEb,UAAIC,OAAO,GAAG,KAAKrB,KAAL,CAAWS,YAAX,CAAwB;AAAEC,QAAAA,YAAY,EAAEvC;AAAhB,OAAxB,CAAd;AACA,UAAI,CAACkD,OAAL,EAAc;AACd,UAAIC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,YAAvB,CAAhB;AACAF,MAAAA,SAAS,CAACG,SAAV,GAAsB,EAAtB;;AACA,WAAI,IAAId,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGU,OAAO,CAACT,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,YAAIe,GAAG,GAAGH,QAAQ,CAACI,aAAT,CAAuB,KAAvB,CAAV;AAEAD,QAAAA,GAAG,CAACE,SAAJ,CAAcC,GAAd,kBAA4BR,OAAO,CAACV,CAAD,CAAP,CAAWb,QAAvC;AACA4B,QAAAA,GAAG,CAACI,KAAJ,CAAUC,KAAV,GAAkB,MAAlB;AACAL,QAAAA,GAAG,CAACI,KAAJ,CAAUE,MAAV,GAAmB,MAAnB;AACAN,QAAAA,GAAG,CAACI,KAAJ,CAAU3B,QAAV,GAAqB,UAArB;AACAuB,QAAAA,GAAG,CAACI,KAAJ,CAAUG,GAAV,GAAgBZ,OAAO,CAACV,CAAD,CAAP,CAAWR,QAAX,CAAoBC,CAApB,GAAwB,EAAxC;AACAsB,QAAAA,GAAG,CAACI,KAAJ,CAAUI,IAAV,GAAiBb,OAAO,CAACV,CAAD,CAAP,CAAWR,QAAX,CAAoBE,CAArC;AACAqB,QAAAA,GAAG,CAACI,KAAJ,CAAUK,MAAV,GAAmB,eAAnB;AAEAb,QAAAA,SAAS,CAACc,WAAV,CAAsBV,GAAtB;AACH;AAEJ;;;;EAxG6BW,mB","sourcesContent":["import { GameEngine, BaseTypes, DynamicObject, SimplePhysicsEngine, TwoVector, KeyboardControls } from 'lance-gg';\n\n// /////////////////////////////////////////////////////////\n//\n// GAME OBJECTS\n//\n// /////////////////////////////////////////////////////////\nclass Player extends DynamicObject {\n\n    constructor(gameEngine, options, props) {\n        super(gameEngine, options, props);\n    }\n\n    static get netScheme() {\n        return Object.assign({\n            health: { type: BaseTypes.TYPES.INT16 }\n        }, super.netScheme);\n    }\n\n    syncTo(other) {\n        super.syncTo(other);\n        this.health = other.health;\n    }\n}\n\n\n// /////////////////////////////////////////////////////////\n//\n// GAME ENGINE\n//\n// /////////////////////////////////////////////////////////\nexport default class Game extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({ gameEngine: this });\n    \n        // common code\n        this.on('postStep', this.gameLogic.bind(this));\n    \n        // server-only code\n        this.on('server__init', this.serverSideInit.bind(this));\n        this.on('server__playerJoined', this.serverSidePlayerJoined.bind(this));\n        this.on('server__playerDisconnected', this.serverSidePlayerDisconnected.bind(this));\n    \n        // client-only code\n        this.on('client__rendererReady', this.clientSideInit.bind(this));\n        this.on('client__draw', this.clientSideDraw.bind(this));\n    }\n    \n    registerClasses(serializer) {\n        serializer.registerClass(Player);\n    }\n\n    gameLogic() {\n    }\n\n    processInput(inputData, playerId) {\n        super.processInput(inputData, playerId);\n    \n        // get the player paddle tied to the player socket\n        let player = this.world.queryObject({ playerId });\n        if (player) {\n            if (inputData.input === 'up') {\n                player.position.y -= 5;\n            } else if (inputData.input === 'down') {\n                player.position.y += 5;\n            } else if (inputData.input === 'left') {\n                player.position.x -= 5;\n            } else if (inputData.input === 'right') {\n                player.position.x += 5;\n            }\n        }\n    }\n\n\n    // /////////////////////////////////////////////////////////\n    //\n    // SERVER ONLY CODE\n    //\n    // /////////////////////////////////////////////////////////\n    serverSideInit() {\n\n        // create the paddle objects\n        //this.addObjectToWorld(new Paddle(this, null, { position: new TwoVector(PADDING, 0) }));\n    \n    }\n\n    // attach newly connected player to next available paddle\n    serverSidePlayerJoined(ev) {\n        let player = this.addObjectToWorld(new Player(this, null, { position: new TwoVector(100, 100)}))\n        player.playerId = ev.playerId;\n    }\n\n    serverSidePlayerDisconnected(ev) {\n        let player = this.world.queryObjects({ instanceType: Player });\n        for(var i = 0; i < player.length; i++)\n            if(player[i].playerId == ev.playerId) \n                this.removeObjectFromWorld(player[i].id);\n    }\n\n\n    // /////////////////////////////////////////////////////////\n    //\n    // CLIENT ONLY CODE\n    //\n    // /////////////////////////////////////////////////////////\n    clientSideInit() {\n        this.controls = new KeyboardControls(this.renderer.clientEngine);\n        this.controls.bindKey('up', 'up', { repeat: true } );\n        this.controls.bindKey('down', 'down', { repeat: true } );\n        this.controls.bindKey('left', 'left', { repeat: true } );\n        this.controls.bindKey('right', 'right', { repeat: true } );\n    }\n    \n    clientSideDraw() {\n    \n        let players = this.world.queryObjects({ instanceType: Player });\n        if (!players) return;\n        var gamePanel = document.querySelector('.GamePanel');\n        gamePanel.innerHTML = \"\";\n        for(var i = 0; i < players.length; i++) {\n            var div = document.createElement('div');\n\n            div.classList.add(`.player${players[i].playerId}`)\n            div.style.width = '10px';\n            div.style.height = '10px';\n            div.style.position = \"absolute\"\n            div.style.top = players[i].position.y + 10;\n            div.style.left = players[i].position.x;\n            div.style.border = \"solid 1px red\";\n\n            gamePanel.appendChild(div);\n        }\n\n    }\n}\n"],"file":"Game.js"}